<script type="text/javascript">
  $(function () {
    regenerate_description($('.description'))
  });
</script>

<%= form_for @composer.job_invocation, :html => {'data-refresh-url' => refresh_job_invocations_path, :id => 'job_invocation_form'} do |f| %>

  <%= selectable_f f, :job_category, @composer.available_job_categories, {}, :label => _('Job category') %>

  <% selected_templates_per_provider = {} %>
  <% @composer.displayed_provider_types.each do |provider_type| %>
    <%= f.fields_for 'providers' do |providers_fields| %>
      <%= providers_fields.fields_for provider_type do |provider_type_fields| %>
        <% templates_for_provider = @composer.templates_for_provider(provider_type) %>
        <% selected_templates_per_provider[provider_type] = @composer.preselected_template_for_provider(provider_type) || templates_for_provider.first %>

        <%= selectable_f provider_type_fields, 'job_template_id', templates_for_provider.map { |t| [t.name, t.id] },
                         { :selected => selected_templates_per_provider[provider_type].try(:id) },
                         { :class => 'job_template_selector', :label => _('Job template'),
                           :data => { :provider_type => provider_type }, :required => true, :onchange => "template_change(this);" }%>
      <% end %>
    <% end %>
  <% end %>

  <%= fields_for @composer.targeting do |targeting_fields| %>
    <span id="bookmark_query_map">
      <% @composer.available_bookmarks.each do |bookmark| %>
        <span id="bookmark-<%= bookmark.id %>" data-query="<%= bookmark.query %>"></span>
      <% end %>
    </span>
    <%= selectable_f targeting_fields, :bookmark_id, @composer.available_bookmarks.map { |b| [b.name, b.id] }, :selected => @composer.targeting.bookmark_id, :include_blank => true %>
    <%= textarea_f targeting_fields, :search_query, :value => @composer.displayed_search_query, :rows => 5 %>

    <div class="form-group ">
      <label class="col-md-2 control-label"><%= _('Resolves to') %></label>

      <div class="col-md-4">
        <%= @composer.targeted_hosts_count %> <%= _('hosts') %>
        <%= button_tag(:type => 'button', :class => 'btn btn-default btn-sm', :title => _("Refresh"), :id => 'refresh_execution_form') do %>
          <%= icon_text('refresh', '', :kind => 'fa') %>
        <% end %>
        <%= button_tag(:type => 'button', :class => 'btn btn-default btn-sm', :title => _("Preview"), :id => 'preview_hosts') do %>
          <%= icon_text('eye', '', :kind => 'fa') %>
        <% end %>
      </div>
    </div>

    <div class="form-group ">
      <label class="col-md-2 control-label"><%= _('Type of query') %></label>

      <div class="col-md-4">
        <%= radio_button_f targeting_fields, :targeting_type, :value => Targeting::STATIC_TYPE, :text => _(Targeting::TYPES[Targeting::STATIC_TYPE]) %>
        <%= radio_button_f targeting_fields, :targeting_type, :value => Targeting::DYNAMIC_TYPE, :text => _(Targeting::TYPES[Targeting::DYNAMIC_TYPE]) %>
      </div>

      <span class="help-inline"><%= popover(_('Explanation'),
                                    _("Type has impact on when is the query evaulated to hosts.<br><ul><li><b>Static</b> - evaluates just after you submit this form</li><li><b>Dynamic</b> - evaluates just before the execution is started, so if it's planed in future, targeted hosts set may change before it</li></ul>")) %>
      </span>
    </div>
  <% end %>

  <% @composer.displayed_provider_types.each do |provider_type| %>
    <fieldset id="provider_<%= provider_type %>" class="provider_form">
      <%= f.fields_for 'providers' do |providers_fields| %>
        <%= providers_fields.fields_for provider_type do |provider_type_fields| %>
          <%= provider_type_fields.fields_for :job_templates do |job_templates_fields| %>
            <% @composer.templates_for_provider(provider_type).each do |job_template| %>
              <fieldset id="job_template_<%= job_template.id %>" class="job_template_form <%= 'hidden' if job_template != selected_templates_per_provider[provider_type] %>">
                <%= job_templates_fields.fields_for job_template.id.to_s do |job_template_fields| %>

                  <%= job_template_fields.fields_for :input_values do |input_values_fields| %>
                    <% job_template.template_inputs_with_foreign.select { |input| input.input_type == 'user' }.each do |input| %>
                      <%= input_values_fields.fields_for input.id.to_s, @composer.template_invocation_input_value_for(job_template, input) do |input_fields| %>
                        <% unless input.options.blank? %>
                          <%= selectable_f input_fields, :value, input.options_array, {:include_blank => !input.required}, :require => input.required, :label => input.name, :help_inline => input.description, :id => input.name, :onchange => "regenerate_description(this);" %>
                        <% else %>
                          <%= textarea_f input_fields, :value, :label => input.name, :help_inline => input.description, :required => input.required, :rows => 2, :onchange => "regenerate_description(this);", :id => input.name %>
                        <% end %>
                      <% end %>
                    <% end %>
                  <% end %>
                  <% if job_template.effective_user.overridable? %>
                    <%= text_f job_template_fields, :effective_user, :label => _('Effective user'), :help_inline => N_("A user to be used for executing the script. If it differs from the SSH user, su or sudo is used to switch the accounts.") %>
                  <% end %>
                  <%= render :partial => 'description_fields', :locals => { :f => f, :job_template => job_template, :disabled => job_template != selected_templates_per_provider[provider_type] } %>
                <% end %>
              </fieldset>
            <% end %>
          <% end %>
        <% end %>
      <% end %>
    </fieldset>
  <% end %>

  <%= trigger_selector f, @composer.triggering %>
  <%= render :partial => 'preview_hosts_modal' %>


  <%= submit_or_cancel f %>
<% end %>
